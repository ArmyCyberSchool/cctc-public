heat_template_version: 2016-10-14

description: Heat Template - Networking - Individual for Students

parameters:

  last_name:
    type: string
    label: Last Name
    description: Last Name
    default: 
    constraints:
      -  length: { min: 1, max: 15 }
         description: Last name must be no longer than 15 characters
      -  allowed_pattern: "[a-zA-Z]*"
         description: Last name may only contain letters

  password:
    type: string
    label: Password
    description: Set root/admin password for instances
    hidden: true
    default: password
    constraints:
      -  length: { min: 8, max: 20 }
         description: Password must be between 8 and 20 characters
      -  allowed_pattern: "[a-zA-Z0-9]*"
         description: Password may not contain special characters

resources:

  external_router:
    type: OS::Neutron::Router
    properties: 
      name: external_router
      external_gateway_info: 
        network: public

  network_0:
    properties:
      admin_state_up: true
      name: Net0
      shared: false
    type: OS::Neutron::Net

  subnet_0:
    type: OS::Neutron::Subnet
    properties:
      allocation_pools:
      - end: 10.0.0.250
        start: 10.0.0.200
      cidr: 10.0.0.0/24
      dns_nameservers:
      - 10.50.255.254
      enable_dhcp: true
      gateway_ip: 10.0.0.254
      host_routes: []
      ip_version: 4
      name: subnet0
      network_id:
        get_resource: network_0

  external_router_interface_0:
    type: OS::Neutron::RouterInterface
    properties: 
      router_id: { get_resource: external_router }
      subnet_id: { get_resource: subnet_0 }

  network_1:
    properties:
      admin_state_up: true
      name: Net1
      shared: false
    type: OS::Neutron::Net

  subnet_1:
    type: OS::Neutron::Subnet
    properties:
      allocation_pools:
      - end: 10.1.0.250
        start: 10.1.0.200
      cidr: 10.1.0.0/24
      dns_nameservers:
      - 10.50.255.254
      enable_dhcp: true
      gateway_ip: 10.1.0.1
      host_routes: [{"nexthop": 10.1.0.1, "destination": 10.2.0.0/24},{"nexthop": 10.1.0.1, "destination": 10.3.0.0/24}]
      ip_version: 4
      name: subnet1
      network_id:
        get_resource: network_1

  network_2:
    properties:
      admin_state_up: true
      name: Net2
      shared: false
    type: OS::Neutron::Net

  subnet_2:
    type: OS::Neutron::Subnet
    properties:
      allocation_pools:
      - end: 10.2.0.250
        start: 10.2.0.200
      cidr: 10.2.0.0/24
      dns_nameservers:
      - 10.50.255.254
      enable_dhcp: true
      gateway_ip: 10.2.0.1
      host_routes: [{"nexthop": 10.2.0.1, "destination": 10.1.0.0/24},{"nexthop": 10.2.0.2, "destination": 10.3.0.0/24}]
      ip_version: 4
      name: subnet2
      network_id:
        get_resource: network_2

  network_3:
    properties:
      admin_state_up: true
      name: Net3
      shared: false
    type: OS::Neutron::Net

  subnet_3:
    type: OS::Neutron::Subnet
    properties:
      allocation_pools:
      - end: 10.3.0.250
        start: 10.3.0.200
      cidr: 10.3.0.0/24
      dns_nameservers:
      - 10.50.255.254
      enable_dhcp: true
      gateway_ip: 10.3.0.1
      host_routes: [{"nexthop": 10.3.0.1, "destination": 10.1.0.0/24},{"nexthop": 10.3.0.1, "destination": 10.2.0.0/24}]
      ip_version: 4
      name: subnet3
      network_id:
        get_resource: network_3

# ----- Define Hosts -----

  host1_subnet_0_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: network_0 }
      fixed_ips:
        - ip_address: 10.0.0.1
      port_security_enabled: false

  host1_subnet_1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: network_1 }
      fixed_ips:
        - ip_address: 10.1.0.2
      port_security_enabled: false

  host1:
    type: OS::Nova::Server
    properties:
      diskConfig: AUTO
      flavor: cy.medium
      image: Debian LXDE      
      name:
        str_replace:
          template: H1-lastname-Debian-GUI
          params:
            lastname: {get_param: last_name}
      networks:
        - port: { get_resource:  host1_subnet_0_port }
        - port: { get_resource:  host1_subnet_1_port }
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            echo 127.0.0.1 $(hostname) >> /etc/hosts
            sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
            export DEBIAN_FRONTEND=noninteractive
            apt-get update
            apt-get -y install locate dnsutils lsof ftp telnet
            apt-get -y install wireshark tcpdump p0f scapy
            apt-get -y install nmap proxychains pv
            apt-get -y install nginx proftpd
            apt-get -y install ethtool

            #Setup webpage
            cat > /var/www/html/index.html << "__EOF__"
            <html>
            <h1>Page</h1>
            This is a blank webpage on H1.
            </html>
            __EOF__
            
            #Setup proftpd and create anonymously hosted file
            cat > /etc/proftpd/conf.d/anonymous.conf <<"__EOF__"
            <Anonymous ~ftp>
              User				ftp
              Group				nogroup
              # We want clients to be able to login with "anonymous" as well as "ftp"
              UserAlias			anonymous ftp
              # Cosmetic changes, all files belongs to ftp user
              DirFakeUser	on ftp
              DirFakeGroup on ftp

              RequireValidShell		off

              # Limit the maximum number of anonymous logins
              MaxClients			10

              # We want 'welcome.msg' displayed at login, and '.message' displayed
              # in each newly chdired directory.
              DisplayLogin			welcome.msg
              DisplayChdir		.message

              # Limit WRITE everywhere in the anonymous chroot
              <Directory *>
                <Limit WRITE>
                  DenyAll
                </Limit>
              </Directory>

              # Uncomment this if you're brave.
              # <Directory incoming>
              #   # Umask 022 is a good standard umask to prevent new files and dirs
              #   # (second parm) from being group and world writable.
              #   Umask				022  022
              #            <Limit READ WRITE>
              #            DenyAll
              #            </Limit>
              #            <Limit STOR>
              #            AllowAll
              #            </Limit>
              # </Directory>

            </Anonymous>
            __EOF__
            service proftpd restart
            cat > /srv/ftp/ftp.txt << "__EOF__"
            This is a file hosted via ftp and accessible via anonymous login on H1.
            __EOF__

            #Disable TCP Offloading
            cat > /etc/network/if-up.d/tcpoffload << "__EOF__"
            #!/bin/bash
            if [ $IFACE = "eth1" ]; then
              /sbin/ethtool -K eth1 tx off sg off tso off
            fi
            __EOF__
            chmod +x /etc/network/if-up.d/tcpoffload

            useradd $user -m -U -s /bin/bash
            usermod -aG sudo $user
            echo "root:$password" | chpasswd
            echo "$user:$password" | chpasswd
            reboot
          params:
            $user: { get_param: last_name }
            $password: { get_param: password }
      user_data_format: RAW

  host2_subnet_0_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: network_0 }
      fixed_ips:
        - ip_address: 10.0.0.2
      port_security_enabled: false

  host2_subnet_1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: network_1 }
      fixed_ips:
        - ip_address: 10.1.0.3
      port_security_enabled: false

  host2:
    type: OS::Nova::Server
    properties:
      diskConfig: AUTO
      flavor: cy.medium
      image: Windows 10
      name: 
        str_replace:
          template: H2-lastname-Windows-10
          params:
            lastname: {get_param: last_name}
      networks:
        - port: { get_resource: host2_subnet_0_port }
        - port: { get_resource: host2_subnet_1_port }
      user_data:
        str_replace:
          template: |
            #ps1_sysnative
            $ErrorActionPreference = 'SilentlyContinue'
            netsh advfirewall set allprofiles state off
            set-ItemProperty -Path 'HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\System' -name "dontdisplaylastusername" -Value 1
            netsh int tcp set global chimney=disabled
            net user /add $user $password /y
            exit 1001
          params:
            $user: { get_param: last_name }
            $password: { get_param: password }
      user_data_format: RAW

  router1_subnet_1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: network_1 }
      fixed_ips:
        - ip_address: 10.1.0.1
      port_security_enabled: false

  router1_subnet_2_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: network_2 }
      fixed_ips:
        - ip_address: 10.2.0.1
      port_security_enabled: false

  router1:
    type: OS::Nova::Server
    properties:
      diskConfig: AUTO
      flavor: m1.ios
      image: csr1000 networking-individual R1
      name:
        str_replace:
          template: R1-lastname
          params:
            lastname: {get_param: last_name}
      networks:
        - port: { get_resource: router1_subnet_1_port }
        - port: { get_resource: router1_subnet_2_port }

  host3_subnet_0_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: network_0 }
      fixed_ips:
        - ip_address: 10.0.0.4
      port_security_enabled: false

  host3_subnet_2_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: network_2 }
      fixed_ips:
        - ip_address: 10.2.0.4
      port_security_enabled: false

  host3:
    type: OS::Nova::Server
    properties:
      diskConfig: AUTO
      flavor: cy.small
      image: Debian Jessie      
      name:
        str_replace:
          template: H3-lastname-Debian
          params:
            lastname: {get_param: last_name}
      networks:
        - port: { get_resource:  host3_subnet_0_port }
        - port: { get_resource:  host3_subnet_2_port }
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            echo 127.0.0.1 $(hostname) >> /etc/hosts
            sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
            export DEBIAN_FRONTEND=noninteractive
            apt-get update
            apt-get -y install locate dnsutils lsof ftp telnet
            apt-get -y install nginx proftpd
            apt-get -y install ethtool

            #Setup webpage
            cat > /var/www/html/index.html << "__EOF__"
            <html>
            <h1>Page</h1>
            This is a blank webpage on H3.
            </html>
            __EOF__
            
            #Setup proftpd and create anonymously hosted file
            cat > /etc/proftpd/conf.d/anonymous.conf <<"__EOF__"
            <Anonymous ~ftp>
              User				ftp
              Group				nogroup
              # We want clients to be able to login with "anonymous" as well as "ftp"
              UserAlias			anonymous ftp
              # Cosmetic changes, all files belongs to ftp user
              DirFakeUser	on ftp
              DirFakeGroup on ftp

              RequireValidShell		off

              # Limit the maximum number of anonymous logins
              MaxClients			10

              # We want 'welcome.msg' displayed at login, and '.message' displayed
              # in each newly chdired directory.
              DisplayLogin			welcome.msg
              DisplayChdir		.message

              # Limit WRITE everywhere in the anonymous chroot
              <Directory *>
                <Limit WRITE>
                  DenyAll
                </Limit>
              </Directory>

              # Uncomment this if you're brave.
              # <Directory incoming>
              #   # Umask 022 is a good standard umask to prevent new files and dirs
              #   # (second parm) from being group and world writable.
              #   Umask				022  022
              #            <Limit READ WRITE>
              #            DenyAll
              #            </Limit>
              #            <Limit STOR>
              #            AllowAll
              #            </Limit>
              # </Directory>

            </Anonymous>
            __EOF__
            service proftpd restart
            cat > /srv/ftp/ftp.txt << "__EOF__"
            This is a file hosted via ftp and accessible via anonymous login on H3.
            __EOF__

            #Disable TCP Offloading
            cat > /etc/network/if-up.d/tcpoffload << "__EOF__"
            #!/bin/bash
            if [ $IFACE = "eth1" ]; then
              /sbin/ethtool -K eth1 tx off sg off tso off
            fi
            __EOF__
            chmod +x /etc/network/if-up.d/tcpoffload

            useradd $user -m -U -s /bin/bash
            usermod -aG sudo $user
            echo "root:$password" | chpasswd
            echo "$user:$password" | chpasswd
            reboot
          params:
            $user: { get_param: last_name }
            $password: { get_param: password }
      user_data_format: RAW

  firewall1_subnet_0_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: network_0 }
      fixed_ips:
        - ip_address: 10.0.0.5
      port_security_enabled: false

  firewall1_subnet_2_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: network_2 }
      fixed_ips:
        - ip_address: 10.2.0.2
      port_security_enabled: false

  firewall1_subnet_3_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: network_3 }
      fixed_ips:
        - ip_address: 10.3.0.1
      port_security_enabled: false
  
  firewall1:
    type: OS::Nova::Server
    properties:
      diskConfig: AUTO
      flavor: cy.medium
      image: dmzfw
      name: 
        str_replace:
          template: Firewall-lastname-pfSense
          params:
            lastname: {get_param: last_name}
      networks:
        - port: { get_resource: firewall1_subnet_0_port }
        - port: { get_resource: firewall1_subnet_2_port }
        - port: { get_resource: firewall1_subnet_3_port }

  host4_subnet_0_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: network_0 }
      fixed_ips:
        - ip_address: 10.0.0.6
      port_security_enabled: false

  host4_subnet_3_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: network_3 }
      fixed_ips:
        - ip_address: 10.3.0.2
      port_security_enabled: false

  host4:
    type: OS::Nova::Server
    properties:
      diskConfig: AUTO
      flavor: cy.small
      image: Debian Jessie
      name: 
        str_replace:
          template: H4-lastname-DMZ-Client
          params:
            lastname: {get_param: last_name}
      networks:
        - port: { get_resource: host4_subnet_0_port }
        - port: { get_resource: host4_subnet_3_port }
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            echo 127.0.0.1 $(hostname) >> /etc/hosts
            sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
            export DEBIAN_FRONTEND=noninteractive
            apt-get update
            apt-get -y install ethtool

            #Disable TCP Offloading
            cat > /etc/network/if-up.d/tcpoffload << "__EOF__"
            #!/bin/bash
            if [ $IFACE = "eth1" ]; then
              /sbin/ethtool -K eth1 tx off sg off tso off
            fi
            __EOF__
            chmod +x /etc/network/if-up.d/tcpoffload

            touch /file1.txt
            chmod 777 /file1.txt
            echo "Buggs Bunny says you are a success" > /file1.txt
            touch /file2.txt
            chmod 777 /file2.txt
            echo "Honey Badger says try again" > /file2.txt
            cat > /etc/init.d/autostart <<"__EOF__"
            #!/bin/bash
            case "$1" in
              start)
               (while true; do (cat /file1.txt - | nc -l -p 1234 > /dev/null); done) &
               (while true; do (cat /file2.txt - | nc -l -p 7777 > /dev/null); done) &
                ;;
              *)
                ;;
            esac
            exit 0
            __EOF__
            chmod u+x /etc/init.d/autostart
            update-rc.d autostart defaults

            #Disable TCP Offloading
            cat > /etc/network/if-up.d/tcpoffload << "__EOF__"
            #!/bin/bash
            if [ $IFACE = "eth1" ]; then
              /sbin/ethtool -K eth1 tx off sg off tso off
            fi
            __EOF__
            chmod +x /etc/network/if-up.d/tcpoffload

            useradd $user -m -U -s /bin/bash
            usermod -aG sudo $user
            echo "root:$password" | chpasswd
            echo "$user:$password" | chpasswd
            reboot
          params:
            $user: { get_param: last_name }
            $password: { get_param: password }
      user_data_format: RAW
