heat_template_version: 2017-02-24

description: Heat Template for CCTCv2.0 Linux module of class - Debian Jessie , Ubuntu 16.04

parameters:

  student_id:
    type: string
    label: Student ID
    description: Student ID Number with No Leading Zeros

  last_name:
    type: string
    label: Last Name
    description: Last Name
    default:
    constraints:
      -  length: { min: 1, max: 15 }
         description: Last name must be no longer than 15 characters
      -  allowed_pattern: "[a-zA-Z]*"
         description: Last name may only contain letters

  password:
    type: string
    label: Password
    description: Set root/admin password for instances
    hidden: true
    default:
    constraints:
      -  length: { min: 8, max: 20 }
         description: Password must be between 8 and 20 characters
      -  allowed_pattern: "[a-zA-Z0-9]*"
         description: Password may not contain special characters

resources:

  stu-network:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
          template: lastName_Network
          params:
            lastName: { get_param: last_name }
      admin_state_up: true
      shared: false

  stu-subnet:
    type: OS::Neutron::Subnet
    properties:
      allocation_pools:
        - start:
            str_replace:
              template: 10.studentID.0.200
              params:
                studentID: { get_param: student_id }
          end:
            str_replace:
              template: 10.studentID.0.250
              params:
                studentID: { get_param: student_id }
      cidr:
        str_replace:
          template: 10.studentID.0.0/24
          params:
            studentID: { get_param: student_id }
      gateway_ip:
        str_replace:
          template: 10.studentID.0.254
          params:
            studentID: { get_param: student_id }
      network_id: { get_resource: stu-network }
      dns_nameservers: [10.50.255.254]
      enable_dhcp: true
      host_routes: []
      ip_version: 4
      name:
        str_replace:
          template: lastname_subnet
          params:
            lastname: { get_param: last_name }

  stu-router:
    type: OS::Neutron::Router    
    properties:
      name:
        str_replace:
          template: lastname_router
          params:
            lastname: { get_param: last_name }
      external_gateway_info: {"network": public}

  stu-router-interface:
    type:  OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: stu-router }       
      subnet_id: { get_resource: stu-subnet }
      
  float_ip_1:
    type: OS::Neutron::FloatingIP
    depends_on: stu-router
    properties: { floating_network: public }

  float_port_1:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: stu-network }
      fixed_ips:
        - subnet_id: { get_resource: stu-subnet }
          ip_address:
            str_replace:
              template: 10.studentID.0.1
              params:
                studentID: { get_param: student_id }
      port_security_enabled: false
      
  float_ip_assoc_1:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: float_ip_1 }
      port_id: { get_resource: float_port_1 }

  host1:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: Ubuntu
          params:
            lastname: { get_param: last_name }
      image: Ubuntu 16.04
      flavor: cy.medium
      diskConfig: AUTO
      networks: 
        - port: { get_resource: float_port_1 }
      user_data: 
        str_replace:
          template: |
            #!/bin/bash  
            export DEBIAN_FRONTEND=noninteractive
            echo 127.0.0.1 $(hostname) >> /etc/hosts
            cp /etc/apt/sources.list /sources.list.bak
            # echo "http://acng.bbh.cyberschool.army.mil:3142" > /etc/apt/sources.list
            apt-get -y update
            apt-get -y upgrade
            pkg_array=({locate,dnsutils,lsof,aptitude,ftp,auditd,xinetd,telnetd,samba,git,zip,unzip,figlet,sshpass,hexedit,hexeditor,tree,apache2,gcc,tcc,build-essential,libreadline-dev,libssl-dev,libpq5,libpq-dev,libreadline5,libsqlite3-dev,libpcap-dev,git-core,autoconf,pgadmin3,curl,zlib1g-dev,libxml2-dev,libxslt1-dev,libyaml-dev,python-setuptools,python-dev,xrdp,netcat,firefox,figlet,lolcat,ubuntu_desktop})
            for x in ${pkg_array[@]}; do apt-get install -y $x; done
            apt-get -y install qemu && apt-get -y install qemu
            gem install lolcat
            updatedb
            mandb
            mkdir /usr/share/class
            
            # ----- GRABS PE BINARIES <ENSURE URL IS CURRENT>
            wget -r -l 1 -nH -nd -R "index.html*","*.gif","*.pyc","banner.*" 10.50.20.181/linux/ -P /usr/share/class/
            wget 10.50.20.181/linux/check.pyc -O /usr/share/misc/check.pyc
            wget 10.50.20.181/linux/banner.sh -O /usr/share/misc/banner.sh
            cat > /usr/share/misc/check_script.sh << "__EOF__"
            #!/bin/bash
            /usr/bin/env python /usr/share/misc/check.pyc
            __EOF__
            echo 'alias check="/usr/share/misc/check_script.sh"' >> /etc/bash.bashrc
            chmod +x /usr/share/class/*
            chmod +x /usr/share/misc/{check.pyc,banner.sh,check_script.sh}
            
            # ----- ENABLES SSH
            sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
            sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
            systemctl restart ssh
            
            # ----- ENABLES TELNET
            cat > /etc/xinetd.d/telnet <<"__TELNET__"
            # default: on
            # description: The telnet server serves telnet sessions; it uses
            # unencrypted username/password pairs for authentication.
            service telnet
            {
            disable = no
            flags = REUSE
            socket_type = stream
            wait = no
            user = root
            server = /usr/sbin/in.telnetd
            log_on_failure += USERID
            }
            __TELNET__
            for x in {0..9}; do echo "pts/$x" >> /etc/securetty ; done
            systemctl restart xinetd.service
            
            # ----- INSTALLS LOGGING RULES INTO /etc/rsyslog.conf <not default in UBUNTU>
            cat > /tmp/log_rules.txt <<"__LOGS__"
            
            ###############
            #### RULES ####
            ###############
            #
            # First some standard log files.  Log by facility.
            #
            auth,authpriv.*			/var/log/auth.log
            *.*;auth,authpriv.none	-/var/log/syslog
            #cron.*				    /var/log/cron.log
            daemon.*			    -/var/log/daemon.log
            kern.*				    -/var/log/kern.log
            lpr.*				    -/var/log/lpr.log
            mail.*				    -/var/log/mail.log
            user.*				    -/var/log/user.log
            
            __LOGS__
            sed '/$IncludeConfig \/etc\/rsyslog.d\/\*.conf/r /tmp/log_rules.txt' -i /etc/rsyslog.conf
            systemctl restart rsyslog.service
            
            useradd $user -m -U -s /bin/bash
            useradd -m zeus -U -s /bin/bash
            usermod -aG sudo $user
            usermod -aG sudo zeus
            echo "root:$password" | chpasswd
            echo "$user:$password" | chpasswd
            echo "zeus:PassWord1234" | chpasswd
            
            systemctl reboot
            systemctl set-default graphical.target
          params:
            $user: { get_param: last_name }
            $password: { get_param: password }
            $studentID: { get_param: student_id }
      user_data_format: RAW
  
  float_ip_2:
    type: OS::Neutron::FloatingIP
    depends_on: stu-router
    properties: { floating_network: public }

  float_port_2:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: stu-network }
      fixed_ips:
        - subnet_id: { get_resource: stu-subnet }
          ip_address:
            str_replace:
              template: 10.studentID.0.2
              params:
                studentID: { get_param: student_id }
      port_security_enabled: false
  
  float_ip_assoc_2:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: float_ip_2 }
      port_id: { get_resource: float_port_2 }
  
  host2:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: Debian
          params:
            lastname: { get_param: last_name }
      image: Debian Stretch
      flavor: cy.medium
      diskConfig: AUTO
      networks: 
        - port: { get_resource: float_port_2 }
      user_data: 
        str_replace:
          template: |
            #!/bin/bash            
            echo 127.0.0.1 $(hostname) >> /etc/hosts
            export DEBIAN_FRONTEND=noninteractive
            cp /etc/apt/sources.list /.sources.list.bak
            # echo "http://acng.bbh.cyberschool.army.mil:3142" > /etc/apt/sources.list
            apt-get -y update
            apt-get -y upgrade
            pkg_array=({locate,dnsutils,lsof,aptitude,ftp,auditd,xinetd,telnetd,samba,git,zip,unzip,figlet,sshpass,hexedit,hexeditor,tree,apache2,gcc,tcc,build-essential,libreadline-dev,libssl-dev,libpq5,libpq-dev,libreadline5,libsqlite3-dev,libpcap-dev,git-core,autoconf,pgadmin3,curl,zlib1g-dev,libxml2-dev,libxslt1-dev,libyaml-dev,python-setuptools,python-dev,xrdp,netcat,firefox,lolcat,xfce4})
            for x in ${pkg_array[@]}; do apt-get install -y $x; done
            apt-get -y install qemu && apt-get -y install qemu
            gem install lolcat
            updatedb
            mandb
            mkdir /usr/share/class
            
            # ----- GRABS PE BINARIES <ENSURE URL IS CURRENT>
            wget -r -l 1 -nH -nd -R "index.html*","*.gif","*.pyc","banner.*" 10.50.20.181/linux/ -P /usr/share/class/
            wget 10.50.20.181/linux/check.pyc -O /usr/share/misc/check.pyc
            wget 10.50.20.181/linux/banner.sh -O /usr/share/misc/banner.sh
            cat > /usr/share/misc/check_script.sh << "__EOF__"
            #!/bin/bash
            /usr/bin/env python /usr/share/misc/check.pyc
            __EOF__
            echo 'alias check="/usr/share/misc/check_script.sh"' >> /etc/bash.bashrc
            chmod +x /usr/share/class/*
            chmod +x /usr/share/misc/{check.pyc,banner.sh,check_script.sh}
            
            # ----- ENABLES SSH
            sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
            sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
            sed -i 's/#Port 22/Port 22/' /etc/ssh/sshd_config
            systemctl restart ssh
            
            # ----- ENABLES TELNET
            cat > /etc/xinetd.d/telnet <<"__EOL__"
            # default: on
            # description: The telnet server serves telnet sessions; it uses
            # unencrypted username/password pairs for authentication.
            service telnet
            {
            disable = no
            flags = REUSE
            socket_type = stream
            wait = no
            user = root
            server = /usr/sbin/in.telnetd
            log_on_failure += USERID
            }
            __EOL__
            for x in {0..9}; do echo "pts/$x" >> /etc/securetty ; done
            systemctl restart xinetd.service
            
            useradd -m -U -s /bin/bash $user 
            useradd -m -U -s /bin/bash zeus
            usermod -aG sudo $user
            usermod -aG sudo zeus
            echo "root:$password" | chpasswd
            echo "$user:$password" | chpasswd
            echo "zeus:PassWord1234" | chpasswd

            systemctl set-default graphical.target
            systemctl reboot
          params:
            $user: { get_param: last_name }
            $password: { get_param: password }
            $studentID: { get_param: student_id }
      user_data_format: RAW